<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python数据分析[2]</title>
      <link href="/2019/03/29/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-2/"/>
      <url>/2019/03/29/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h3><p>Python是一种解释型语言。Python解释器是通过“一次执行一条语句”的方式运行程序的。标准的交互式Python解释器可以在命令行上通过python命令启动。退出Python解释器并返回命令提示符,输入exit()或按下Ctrl-D即可。</p><p>虽然许多Python程序员用这种方式执行他们的所有Python代码,但Python科学计算程序员则更趋向于使用IPython(一种加强的交互式Python解释器)。通过使用%run命令,IPython会在同一个进程中执行指定文件中的代码。因此,在这些代码执行完毕之后,你就可以通过交互的方式研究其结果。</p><p>默认的IPython提示符采用的是一种编号的风格(如In[2]:),而不是标准的”&gt;&gt;&gt;”提示符。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="语言语义"><a href="#语言语义" class="headerlink" title="语言语义"></a>语言语义</h4><p>Python语言的设计特点是重视可读性、简洁性以及明确性。有些人甚至将它看做“可执行的伪码”。</p><h4 id="缩进-而不是大括号"><a href="#缩进-而不是大括号" class="headerlink" title="缩进,而不是大括号"></a>缩进,而不是大括号</h4><p>Python是通过空白符(制表符或空格)来组织代码的,不像其他语言(如R、C++、Java、Perl等)用的是大括号。以for循环为例,要实现前面说的那个快速排序算法:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for x in array:</span><br><span class="line">  if x &lt; pivot:</span><br><span class="line">    less.append ( x )</span><br><span class="line">  else:</span><br><span class="line">    greater.append ( x )</span><br></pre></td></tr></table></figure></p><p>冒号表示一段缩进代码块的开始,其后的所有代码都必须缩进相同的量,直到代码块结束为止。在别的语言中,你可能会看到下面这样的东西:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for x in array &#123;</span><br><span class="line">  if x &lt; pivot &#123;</span><br><span class="line">    less.append ( x )</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    greater.append ( X )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前缀#作为注释标识符。</p><h4 id="变量和按引用传递"><a href="#变量和按引用传递" class="headerlink" title="变量和按引用传递"></a>变量和按引用传递</h4><p>在Python中对变量赋值时,你其实是在创建等号右侧对象的一个引用。<br>假如我们将a赋值给一个新变量b:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [2]:b=a</span><br></pre></td></tr></table></figure></p><p>在某些语言中,该赋值过程将会导致数据被复制。而在Python中,a和b现在都指向同一个对象。即指向同一个对象的两个引用。</p><p>注意:赋值(assignment)操作也叫做绑定(binding),因为我们其实是将一个名称和一个对象绑定到一起。已经赋过值的变量名有时也被称为已绑定变量(bound variable)。</p><p>当你将对象以参数的形式传入函数时,其实只是传入了一个引用而已,不会发生任何复制。因此,Python被称为是按引用传递的,而某些其他的语言则既支持按值传递(创建副本)又支持按引用传递。也就是说,Python函数可以修改其参数的内容。</p><h4 id="动态引用-强类型"><a href="#动态引用-强类型" class="headerlink" title="动态引用,强类型"></a>动态引用,强类型</h4><p>跟许多编译型语言(如Java和C++)相反,Python中的对象引用没有与之关联的类型信息。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [245]: a = 5</span><br><span class="line">In [246]: type(a)</span><br><span class="line">Out[246]:int</span><br><span class="line">In [247]: a = &apos; foo&apos;</span><br><span class="line">In [248]: type(a)</span><br><span class="line">Out[2481:str</span><br></pre></td></tr></table></figure></p><p>变量其实就是对象在特定命名空间中的名称而已。对象的类型信息是保存在它自己内部的。有些人可能会轻率地认为Python不是一种“类型化语言”。其实不是这样的。看看下面这个例子:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [249]: &apos;5&apos; + 5</span><br><span class="line">  TypeError</span><br><span class="line">Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-249-f9dbf5f0b234&gt; in &lt;module&gt;(</span><br><span class="line">-----&gt; 1 &apos;5&apos; + 5</span><br><span class="line">TypeError: cannot concatenate &apos;str&apos; and</span><br><span class="line">&apos; int &apos; objects</span><br></pre></td></tr></table></figure></p><p>在有些语言中(比如Visual Basic),字符串’5’可能会被隐式地转换为整数,于是就会得到10。而在另一些语言中(比如JavaScript),整数5可能会被转换为字符串,于是就会得到’55’。而在这一点上,Python可以被认为是一种强类型语言,也就是说,所有对象都有一个特定的类型(或类),隐式转换只在很明显的情况下才会发生,比如下面这样:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [250]: a = 4.5</span><br><span class="line">In [251]: b = 2</span><br><span class="line">#这个操作是字符串格式化,稍后介绍</span><br><span class="line">In [252]: print &apos;a is %s, b is                %s&apos; % (type(a),type(b))</span><br><span class="line">a is &lt;type &apos;float&apos; , b is &lt;type &apos;int&apos;&gt;</span><br><span class="line">In [253]: a / b</span><br><span class="line">Out[253]: 2.25</span><br></pre></td></tr></table></figure></p><p>了解对象的类型是很重要的。要想编写能够处理多个不同类型输入的函数就必须了解有关类型的知识。通过isinstance函数,你可以检查一个对象是否是某个特定类型的实例:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [254]: a = 5</span><br><span class="line">In [255]: isinstance(a,int)</span><br><span class="line">Out[255]:True</span><br></pre></td></tr></table></figure></p><p>isinstance可以接受由类型组成的元组。如果想检查某个对象的类型是否属于元组中所指定的那些:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In[256]:a=5;b=4.5</span><br><span class="line">In [257): isinstance(a, (int, float)</span><br><span class="line">Out[257):True</span><br><span class="line">In [258]: isinstance(b,(int,float))</span><br><span class="line">Out/2581:True</span><br></pre></td></tr></table></figure></p><h4 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h4><p>Python中的对象通常都既有属性(attribute,即存储在该对象“内部”的其他Python对象)又有方法(method,与该对象有关的能够访问其内部数据的函数)。它们都能通过obj.attribute_name这样的语法进行访问:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [1]: a =&apos;foo&apos;</span><br><span class="line">In [2]: a.&lt;Tab&gt;</span><br><span class="line">a.capitalize a.format a.isupper</span><br><span class="line">a.rindex a.strip a.center a.index</span><br><span class="line">a.join a.riust a.swapcase a.count</span><br><span class="line">a.isalnum a.ljust a.rpartition </span><br><span class="line">a.title a.decode a.isalpha a.lower</span><br><span class="line">a.rsplit a.translate a.encode </span><br><span class="line">a.isdigit a.lstrip a.rstrip a.upper</span><br><span class="line">a.endswith a.islower a.partiti</span><br><span class="line">a.split a.zfill a.expandtabs a.isspace a.replace a.splitlines</span><br><span class="line">a.find a.istitle a.rfind a.startswith</span><br></pre></td></tr></table></figure></p><p>属性和方法还可以利用getattr函数通过名称进行访问:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;getattr(a,&apos;split&apos;)</span><br><span class="line">&lt; function split&gt;</span><br></pre></td></tr></table></figure></p><p>虽然本书没怎么用到getattr函数以及与之相关的hasattr和setattr函数,但是它们还是很实用的,尤其是在编写通用的、可复用的代码时。</p><h4 id="“鸭子”类型"><a href="#“鸭子”类型" class="headerlink" title="“鸭子”类型"></a>“鸭子”类型</h4><p>一般来说,你可能不会关心对象的类型,而只是想知道它到底有没有某些方法或行为。<br>比如说,只要一个对象实现了迭代器协议(iterator protocol),你就可以确认它是可迭代的。对于大部分对象而言,这就意味着它拥有一个<em>iter</em>魔术方法。当然,还有一个更好一些的验证办法,即尝试使用iter函数:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def isiterable(obj):</span><br><span class="line">try:</span><br><span class="line">  iter(obj)</span><br><span class="line">  return True</span><br><span class="line">except TypeError:#不可迭代</span><br><span class="line">  return False</span><br></pre></td></tr></table></figure></p><p>对于字符串以及大部分Python集合类型,该函数会返回True:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [260]: isiterable(&apos;a string&apos;) </span><br><span class="line">In [261]: isiterable([1,2,3])</span><br><span class="line">Out[260]:True</span><br><span class="line">Out[261]:True</span><br><span class="line">In [262]: isiterable(5)</span><br><span class="line">Out[262]:False</span><br></pre></td></tr></table></figure></p><p>我常常在编写需要处理多类型输入的函数时用到这个功能。还有一种常见的应用场景:编写可以接受任何序列(列表、元组、ndarray)或迭代器的函数。你可以先检查对象是不是列表(或NumPy数组),如果不是,就将其转换成是:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if not isinstance(x, list) and isiterable(x):</span><br><span class="line">  x = list ( x )</span><br></pre></td></tr></table></figure></p><h4 id="引入-import"><a href="#引入-import" class="headerlink" title="引入(import)"></a>引入(import)</h4><p>在Python中,模块(module)就是一个含有函数和变量定义以及从其他.py文件引入的此类东西的.py文件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import some module</span><br><span class="line">x=some module.xxx</span><br></pre></td></tr></table></figure></p><p>还可以写成这样:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from some_module import xxx</span><br><span class="line">x = xxx (x,...)</span><br></pre></td></tr></table></figure></p><p>通过as关键字,你可以引入不同的变量名<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import some_module as sm</span><br><span class="line">from some_module import xxx as XXX</span><br><span class="line">x=sm.xxx  </span><br><span class="line">x=XXX(x)</span><br></pre></td></tr></table></figure></p><h4 id="二元运算符和比较运算符"><a href="#二元运算符和比较运算符" class="headerlink" title="二元运算符和比较运算符"></a>二元运算符和比较运算符</h4><p>要判断两个引用是否指向同一个对象,可以使用is关键字。如果想判断两个引用是否不是指向同一个对象,则可以使用is not:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [266]: a = [1, 2, 3]</span><br><span class="line">In [267]:b=a</span><br><span class="line">#注意,list函数始终会创建新列表l  </span><br><span class="line">In [268]: c = list(a)</span><br><span class="line">In [269]: a is b</span><br><span class="line">Out[269]:True</span><br><span class="line">In [270]: a is not C</span><br><span class="line">Out[270]:True</span><br></pre></td></tr></table></figure></p><p>注意,这跟比较运算”==”不是一回事,因<br>为对于上面这个情况,我们将会得到:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [271]: a == c</span><br><span class="line">Out[271]:True</span><br></pre></td></tr></table></figure></p><p>is和is not常常用于判断变量是否为None,<br>因为None的实例只有一个:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [272]: a = None</span><br><span class="line">In [273]: a is None</span><br><span class="line">Out[273]:True</span><br></pre></td></tr></table></figure></p><p><img src="https://wx1.sinaimg.cn/large/006B4RNogy1g1jy44b3qdj30u00cyads.jpg" alt="image"></p><p><img src="https://ws2.sinaimg.cn/large/006B4RNogy1g1jy5kqc0rj30u0074mzu.jpg" alt="image"></p><h4 id="可变和不可变的对象"><a href="#可变和不可变的对象" class="headerlink" title="可变和不可变的对象"></a>可变和不可变的对象</h4><p>大部分Python对象是可变的(mutable),比如列表、字典、NumPy数组以及大部分用户自定义类型(类)。也就是说,它们所包含的<br>对象或值是可以被修改的。</p><p>而其他的(如字符串和元组等)则是不可变的(immutable)</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>很多人都是因为Python强大而灵活的字符串处理能力才使用它的。编写字符串字面量时,既可以用单引号(‘)也可以用双引号(“):</p><p>对于带有换行符的多行字符串,可以使用三重引号(即<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">  C = &quot;&quot;&quot;</span><br><span class="line">      This is a longer string that</span><br><span class="line">      spans multiple lines</span><br><span class="line">      &quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>Python字符串是不可变的。要修改字符串就只能创建一个新的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [289]: a = &apos;this is a string&apos;</span><br><span class="line">In[290]:a[10]=&apos;f&apos;</span><br><span class="line">TypeError</span><br><span class="line">Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-290-5ca625d1e504&gt; in &lt;module&gt;()</span><br><span class="line"> ----&gt;1 a[10] = &apos;f&apos;</span><br><span class="line">TypeError:&apos;str&apos; object does not support</span><br><span class="line">item assignment</span><br><span class="line"></span><br><span class="line">In [291]:b=a.replace(&apos;string&apos;,&apos;long</span><br><span class="line">er string&apos;)</span><br><span class="line">In [292]: b</span><br><span class="line">Out[292]: &apos;this is a longer string&apos;</span><br></pre></td></tr></table></figure></p><p>许多Python对象都可以用str函数转换为字符串:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [293]: a = 5.6</span><br><span class="line">In [294]: s =str(a)</span><br><span class="line">In [295]: s</span><br><span class="line">Out[295]:&apos;5.6&apos;</span><br></pre></td></tr></table></figure></p><p>由于字符串其实是一串字符序列,因此可以被当做某种序列类型(如列表、元组等)进行处理:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [296]: s=&apos;python&apos;</span><br><span class="line">In [297]: list(s)</span><br><span class="line">Out[297]: [&apos;p&apos;,&apos;y&apos;,&apos;t&apos;,&apos;h&apos;,&apos;o&apos;,&apos;n&apos;]</span><br><span class="line">In [298]: s[:3]</span><br><span class="line">Out[298]:&apos;pyt&apos;</span><br></pre></td></tr></table></figure></p><p>反斜杠()是转义符(escape character),也就是说,它可用于指定特殊字符(比如新行\n或unicode字符)。要编写带有反斜杠的字符串字面量,也需要对其进行转义。</p><p>若在字符串最左边引号的前边加上r，表示所有的字符按照原来的样子进行解释。</p><p>Python 3带来了一些新的字符串格式化手段,以一个%开头且后面跟着一个或多个格式字符的字符串是需要插入值的目标(这非常类似于C语言中的printf函数)。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [306]: template=&apos;%.2f %s are worth</span><br><span class="line">$%d&apos;</span><br></pre></td></tr></table></figure></p><p>在这个字符串中,%s表示将参数格式化为字符串,%.2f表示一个带有2位小数的数字,%d表示一个整数。要用实参替换这些格式化形参,需要用到二元运算符%以及由值组成的元组:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [307]: template % (4.5560,&apos;Argentine Pesos&apos;, 1)</span><br><span class="line">Out[307]:&apos;4.56 Argentine Pesos are worth $1&apos;</span><br></pre></td></tr></table></figure></p><p>几乎所有内置的Python类型以及任何定义了<em>nonzero</em>魔术方法的类都能在if语句中被解释为True或False。</p><p>Python中大部分对象都有真假的概念。比如说,如果空序列(列表、字典、元组等)用于控制流就会被当做False处理。要想知道某个对象究竟会被强制转换成哪个布尔值,使用bool函数即可。</p><h4 id="None"><a href="#None" class="headerlink" title="None"></a>None</h4><p>如果一个函数没有显式的返回值，则隐式返回None。</p><p>是函数可选参数的一种常见默认值。</p><p>None不是一个保留关键字，而是NoneType的一个实例而已。</p><p><img src="https://ws2.sinaimg.cn/large/006B4RNogy1g1jy7elztdj30u00dk0xu.jpg" alt="image"></p><h4 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h4><p>Python内置的datetime模块提供了datetime、date以及time等类型。datetime类型是用得最多的,它合并了保存在date和time中的信息:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [325]: from datetime import datetime, date , time</span><br><span class="line">In [326]: dt = datetime(2011,10,29,20,30,21)</span><br><span class="line">In [327] : dt.day</span><br><span class="line">In [328]: dt.minute</span><br><span class="line">Out[327]:29</span><br><span class="line">Out[328]:30</span><br></pre></td></tr></table></figure></p><p>给定一个datetime实例,你可以通过调用其date和time方法提取相应的date和time对<br>象:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [329]: dt.date()</span><br><span class="line">In [330] : dt.time ( )</span><br><span class="line">Out[329]:datetime.date(2011,10,29)</span><br><span class="line">Out[330]:datetime.time(20,30,21)</span><br></pre></td></tr></table></figure></p><p>strftime方法用于将datetime格式化为字符串:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [331]: dt.strftime(&apos;%m/%d/%Y%H:%M&apos;)</span><br><span class="line">Out[331]:10/29/2011 20:30&apos;</span><br></pre></td></tr></table></figure></p><p>字符串可以通过strptime函数转换(解析)为datetime对象:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [332] : datetime.strptime (&apos; 20091031 &apos; , &apos;%Y%m%d&apos;)</span><br><span class="line">Out[332]:datetime.datetime(2009,10,31,0,0)</span><br></pre></td></tr></table></figure></p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>调用列表的sort方法可以实现就地排序(无需创建新对象):<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [398]: x = [x,...]</span><br><span class="line">In [399]: x.sort()</span><br></pre></td></tr></table></figure></p><p>sort有几个很不错的选项。一个是次要排序键,即一个能够产生可用于排序的值的函数。例如,可以通过长度对一组字符串进行排序:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [401]:x=[&apos;xxx&apos;,&apos;xxx&apos;,...]</span><br><span class="line">In [402]:x.sort(key=len)</span><br></pre></td></tr></table></figure></p><h4 id="二分搜索及维护有序列表"><a href="#二分搜索及维护有序列表" class="headerlink" title="二分搜索及维护有序列表"></a>二分搜索及维护有序列表</h4><p>内置的bisect模块实现了二分查找以及对有序列表的插入操作。bisect.bisect可以找出新元素应该被插入到哪个位置才能保持原列表的有序性,而bisect.insort则确实地将新元素插入到那个位置上去（但bisect不会判断原列表是否有序）。</p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>通过切片标记法,你可以选取序列类型(数组、元组、NumPy数组等)的子集,其基本形式由索引运算符([])以及传入其中的start:stop构成。(stop未包含在其中)<br>负数索引从序列的末尾开始切片。</p><p>还可以在第二个冒号后面加上步长<br>(step)。比如每隔一位取出一个元素:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [418]: seq[::2]</span><br></pre></td></tr></table></figure></p><p>在这里使用-1是一个很巧妙的办法,它可以实现列表或元组的反序:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [419]: seq[::-1]</span><br></pre></td></tr></table></figure></p><h4 id="内置的序列函数"><a href="#内置的序列函数" class="headerlink" title="内置的序列函数"></a>内置的序列函数</h4><h5 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h5><p>在对一个序列进行迭代时,常常需要跟踪当前项的索引。Python内置了一个enumerate函数,它可以逐个返回序列的(i,value)元组:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i,value in enumerate(collection):</span><br><span class="line">  #用value做一些事情</span><br></pre></td></tr></table></figure></p><p>在对数据进行索引时,enumerate还有一种不错的使用模式,即求取一个将序列值(假定是唯一的)映射到其所在位置的字典。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [420]: some_list=[&apos;foo&apos;,&apos;bar&apos;,baz&apos;]</span><br><span class="line">In [421]: mapping = dict((v, i) for i,v in enumerate(some_list))</span><br><span class="line">In [422]: mapping</span><br><span class="line">Out[422]:&#123;&apos;bar&apos;:1,&apos;baz&apos;:2,&apos;foo&apos;:0&#125;</span><br></pre></td></tr></table></figure></p><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>sorted函数可以将任何序列返回为一个新的有序列表:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [423]: sorted([x,...])</span><br></pre></td></tr></table></figure></p><p>常常将sorted和set结合起来使用以得到一个由序列中的唯一元素组成的有序列表:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [425]: sorted(set(&apos;xxxxxxxxx&apos;))</span><br></pre></td></tr></table></figure></p><h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h5><p>zip用于将多个序列(列表、元组等)中的元素“配对”,从而产生一个新的元组列表。</p><p>zip可以接受任意数量的序列,最终得到的元组数量由最短的序列决定:</p><p>zip最常见的用法是同时迭代多个序列,还可以结合enumerate一起使用:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [431]: for i, (a, b) in enumerate(zip(seq1,seq2)):</span><br><span class="line">print(&apos;%d:%s,%s&apos;%(i,a,b))</span><br><span class="line">0:seq1.x1,seq2.y1</span><br><span class="line">1:seq1.x2,seq2.y2</span><br><span class="line">2:seq1.x3,seq2.y3</span><br></pre></td></tr></table></figure></p><p>对于“已压缩的”(zipped)序列,zip还有一个很巧妙的用法,即对该序列进行“解压”(unzip)。其实就是将一组行转换为一组:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [433]: first_xs,last_xs=zip(*seqs)</span><br></pre></td></tr></table></figure></p><h5 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a>reversed</h5><p>reversed用于按逆序迭代序列中的元<br>素:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [436]: list(reversed(range(10))</span><br><span class="line">0ut[436]: [9,8,7,6,5,4,3,2,1,0]</span><br></pre></td></tr></table></figure></p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>字典(dict)可算是Python中最重要的内置数据结构。它更常见的名字是哈希映射(hash map)或相联数组(associative array)。它是一种大小可变的键值对集,其中的键(key)和值(value)都是Python对象。创建字典的方式之一是:使用大括号({})并用冒号分隔键和值。</p><p>keys和values方法分别用于获取键和值的列表。虽然键值对没有特定的顺序,但这两个函数会以相同的顺序输出键和值:</p><p>Python 3中dict.keys()和dict.values()会返回迭代器而不是列表。</p><p>利用update方法,一个字典可以被合并到另一个字典中去:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [451]: x1.update(&#123;x:&apos;xxx&apos;,&apos;x&apos;:xxx&#125;)</span><br></pre></td></tr></table></figure></p><p>从序列类型创建字典有时你可能会想将两个序列中的元素两两配对地组成一个字典。粗略分析一下之后,你可能会写出这样的代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mapping=&#123;&#125;</span><br><span class="line">for key,value in zip(key_list,value_list):</span><br><span class="line">  mapping[key]=value</span><br></pre></td></tr></table></figure></p><p>由于字典本质上就是一个二元元组集,所以我们完全可以用dict类型函数直接处理二元元组列表:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [453]: mapping = dict(zip(range(5),reversed(range(5))))</span><br></pre></td></tr></table></figure></p><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>下面这样的逻辑很常见:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if key in some_dict:</span><br><span class="line">  value=some_dict[key]</span><br><span class="line">else:</span><br><span class="line">  value = default value</span><br></pre></td></tr></table></figure></p><p>其实dict的get和pop方法可以接受一个可供返回的默认值,于是,上面的if-else块就可以被简单地写成:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  value=some_dict.get(key,default value)</span><br><span class="line">```  </span><br><span class="line">如果key不存在,则get默认返回None,而pop则会引发一个异常。在设置值的时候,常常会将字典中的值处理成别的集类型(比如列表)。例如,根据首字母对一组单词进行分类并最终产生一个由列表组成的字典:</span><br></pre></td></tr></table></figure></p><p>  In[455]:words=[‘apple’,’bat’,’bar’,’atom’,’book’]<br>  In [456]: by_letter = {}<br>  In [457] : for word in words:letter=word[0]<br>    if letter not in by_letter:<br>      by_letter[letter]=[word]<br>    else:<br>      by_letter[letter]. append(n<br>  In [458]: by_letter<br>  Out[458]:{‘a’:[‘apple’,’atom’],’b’:[‘bat’,’bar’,’book’]}<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字典的setdefault方法刚好能达到这个目的。上面的if-else块可以写成:</span><br></pre></td></tr></table></figure></p><p>  by_letter.setdefault(letter,[]).append(word)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内置的collections模块有一个叫做defaultdict的类,它可以使该过程更简单。传入一个类型或函数(用于生成字典各插槽所使用的默认值)即可创建出一个defaultdict:</span><br></pre></td></tr></table></figure></p><p>  from collections import defaultdict<br>  by_letter = defaultdict(list)<br>  for word in words:<br>    by_letter[word[0]].append(word)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaultdict的初始化器只需要一个可调用对象(例如各种函数),并不需要明确的类型。因此,如果你想要将默认值设置为4,只需传入一个能够返回4的函数即可:</span><br></pre></td></tr></table></figure></p><p>  counts=defaultdict(1ambda:4)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 字典键的有效类型</span><br><span class="line">虽然字典的值可以是任何Python对象,但键必须是不可变对象,如标量类型(整数、浮点数、字符串)或元组(元组中的所有对象也必须是不可变的)。</span><br><span class="line"></span><br><span class="line">#### 集合</span><br><span class="line">集合Set是由唯一元素组成的无序集</span><br><span class="line"></span><br><span class="line">![image](https://ws2.sinaimg.cn/large/006B4RNogy1g1jy7elztdj30u00dk0xu.jpg)</span><br><span class="line"></span><br><span class="line">#### 列表,集合,字典推导式</span><br><span class="line">列表推导式如下:</span><br><span class="line">``` </span><br><span class="line">  [expr for val in collection if condition]</span><br></pre></td></tr></table></figure></p><p>这相当于下面这段for循环:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result = [ ]</span><br><span class="line">for val in collection:</span><br><span class="line">  if condition:</span><br><span class="line">    result . append ( expr )</span><br></pre></td></tr></table></figure></p><p>过滤器条件可以省略,只留下表达式。<br>集合和字典的推导式是该思想的一种自然延伸,它们的语法差不多,只不过产生的是集合和字典而已。字典推导式的基本形式如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict_comp=&#123;key-expr:value-expr for value in collection if condition&#125;</span><br></pre></td></tr></table></figure></p><p>集合推导式跟列表推导式非常相似,唯一的区别就是它用的是花括号而不是方括号:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  set_comp=&#123;expr for value in collection if condition&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><h4 id="函数亦为对象"><a href="#函数亦为对象" class="headerlink" title="函数亦为对象"></a>函数亦为对象</h4><p>由于Python函数都是对象,因此,在其他语言中较难表达的一些设计思想在Python中就要简单很多了。假设我们有下面这样一个字符串数组,希望对其进行一些数据清理工作并执行一堆转换:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">states = [ &apos; Alabama &apos; , &apos; Georgia ! &apos; , &apos; Georgia&apos;,&apos;georgia&apos;,&apos;F10rIda&apos;,&apos;south carolina##&apos;,&apos;West virginia?&apos;]</span><br></pre></td></tr></table></figure></p><p>不管是谁,只要处理过由用户提交的调查数据,就能明白这种乱七八糟的数据是怎么一回事。为了得到一组能用于分析工作的格式统一的字符串,需要做很多事情:去除空白符、删除各种标点符号、正确的大写格式等。牟一看上去,我们可能会写出下面这样的代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re # 正则表达式模块</span><br><span class="line">def clean_strings(strings):</span><br><span class="line">  result = [ ]</span><br><span class="line">  for value in strings:</span><br><span class="line">    value = value . strip ( )</span><br><span class="line">    value = re . sub ( &apos; ! ! #? ] &apos; , &apos;&apos; , value)#移除标点符号</span><br><span class="line">    value =value.title()</span><br><span class="line">    result.append(value)</span><br><span class="line">  return result</span><br></pre></td></tr></table></figure></p><p>最终结果如下所示:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [15]: clean_strings(states)</span><br><span class="line">Out[15]:</span><br><span class="line">[&apos;Alabama&apos;</span><br><span class="line">&apos;Georgia&apos;</span><br><span class="line">&apos;Georgia&apos;</span><br><span class="line">&apos;Georgia&apos;</span><br><span class="line">&apos;Florida&apos;,</span><br><span class="line">&apos;South Carolina&apos;,</span><br><span class="line">&apos; West Virginia &apos; ]</span><br></pre></td></tr></table></figure></p><p>其实还有另外一种不错的办法:将需要在一组给定字符串上执行的所有运算做成一个列表:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def remove_punctuation(value):</span><br><span class="line">  return re.sub ( &apos;!#?&apos;,&apos;&apos;, value)</span><br><span class="line"></span><br><span class="line">clean_ops=[str.strip,remove_punctuation,str.title]</span><br><span class="line"></span><br><span class="line">def clean_strings(strings,ops):</span><br><span class="line">  result = [ ]</span><br><span class="line">  for value in strings:</span><br><span class="line">    for function in ops:</span><br><span class="line">      value=function(value)</span><br><span class="line">    result.append (value)</span><br><span class="line">  return result</span><br></pre></td></tr></table></figure></p><p>然后我们就有了:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [22]: clean_strings(states,clean_ops)</span><br><span class="line">Out[22]:</span><br><span class="line">[&apos;Alabama&apos;</span><br><span class="line">&apos;Georgia&apos;,</span><br><span class="line">&apos;Georgia&apos;</span><br><span class="line">&apos;Georgia&apos;,</span><br><span class="line">&apos;Florida&apos;,</span><br><span class="line">&apos;South Carolina&apos;,</span><br><span class="line">&apos;West Virginia&apos;]</span><br></pre></td></tr></table></figure></p><h4 id="闭包-返回函数的函数"><a href="#闭包-返回函数的函数" class="headerlink" title="闭包:返回函数的函数"></a>闭包:返回函数的函数</h4><p>闭包(closure)就是由其他函数动态生成并返回的函数。其关键性质是,被返回的函数可以访问其创建者的局部命名空间中的变量。</p><p>闭包和标准Python函数之间的区别在于:即使其创建者已经执行完毕,闭包仍能继续访问其创建者的局部命名空间。虽然闭包的内部状态一般都是静态的,但也允许使用可变对象(如字典、集合、列表等可以被修改的对象)。例如,下面这个函数可以返回一个能够记录其参数(曾经传入的一切参数)的函数:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def make_watcher():</span><br><span class="line">  have seen = &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  def has_been_seen(x):</span><br><span class="line">    if x in have seen:</span><br><span class="line">      return True</span><br><span class="line">    else:</span><br><span class="line">      have_seen[x]=True</span><br><span class="line">      return False</span><br><span class="line">  </span><br><span class="line">  return has been seen</span><br></pre></td></tr></table></figure></p><p>对一组整数使用该函数,可以得到:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [496]:watcher=make_watcher()</span><br><span class="line">In [497]:vals=[5,6,1,5,1,6,3,5]</span><br><span class="line">In [498]: [watcher(x) for x in vals]</span><br><span class="line">Out[498]: [False, False, False, True, True, True, False, True]</span><br></pre></td></tr></table></figure></p><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><p>生成器表达式(generator expression)是构造生成器的最简单方式。生成器也有一个类似于列表、字典、集合推导式的东西,其创建方式为,把列表推导式两端的方括号改成圆括号:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(expr for val in collection if condition)</span><br></pre></td></tr></table></figure></p><p><a href="http://www.cnblogs.com/coder2012/p/4990834.html" target="_blank" rel="noopener">生成器与yiely补充</a></p><h4 id="itertools模块"><a href="#itertools模块" class="headerlink" title="itertools模块"></a>itertools模块</h4><p>标准库itertools模块中有一组用于许多常见数据算法的生成器。例如,groupby可以接受任何序列和一个函数。它根据函数的返回值对序列中的连续元素进行分组。下面是一个例子:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [514]: import itertools</span><br><span class="line">In [515]: first_letter = lambda x: x[0]</span><br><span class="line">In [516]: names = [&apos;Alan&apos;, &apos;Adam&apos;, &apos;Wes&apos;,Will&apos;,&apos;Albert&apos;,&apos;Steven&apos;]</span><br><span class="line">In [517]: for letter, names in itertools. groupby(names,first_letter):</span><br><span class="line">print letter,list(names)#names是一个生成器</span><br><span class="line"></span><br><span class="line">A [ &apos; Alan &apos; , &apos; Adam &apos; ]</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据分析[1]</title>
      <link href="/2019/03/27/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-1/"/>
      <url>/2019/03/27/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-1/</url>
      
        <content type="html"><![CDATA[<p>Cython项目(<a href="http://cython.org)已经成为Python领域中创建编译型扩展以及对接C/C++代码的一大途径。" target="_blank" rel="noopener">http://cython.org)已经成为Python领域中创建编译型扩展以及对接C/C++代码的一大途径。</a></p><h3 id="为什么不选Python"><a href="#为什么不选Python" class="headerlink" title="为什么不选Python"></a>为什么不选Python</h3><p>虽然Python非常适合构建计算密集型科学应用程序以及几乎各种各样的通用系统,但它对于不少应用场景仍然力有不逮。</p><p>由于Python是一种解释型编程语言,因此大部分Python代码都要比用编译型语言(比如 Java和C++)编写的代码运行慢得多。由于程序员的时间通常都比CPU时间值钱,因此许多人也愿意在这里做一些权衡。但是,在那些要求延迟非常小的应用程序中(例如高频交易系统),为了尽最大可能地优化性能,耗费时间使用诸如C++这样更低级、更低生产率的语言进行编程也是值得的。</p><p>对于高并发、多线程的应用程序而言(尤其是拥有许多计算密集型线程的应用程序),Python并不是一种理想的编程语言。这是因为Python有一个叫做全局解释器锁(Global Interpreter Lock,GIL)的东西,这是一种防止解释器同时执行多条Python字节码指令的机制。（作注:GIL实质上属于Cython解释器所使用的同步线程的一种机制，使得时刻仅有一个线程在执行。具体的问题剖析可见<a href="http://cenalulu.github.io/python/gil-in-python/" target="_blank" rel="noopener">该博文</a>）</p><p>虽然很多人数据处理应用程序为了能在较短的时间内完成数据集的处理工作都需要运行在计算机集群上,但是仍然有一些情况需要用单进程多线程系统来解决。</p><p>这并不是说Python不能执行真正的多线程并行代码,只不过这些代码不能在单个Python进程中执行而已。比如说,Cython项目可以集成OpenMP(一个用于并行计算的C框架)以实现并行处理循环进而大幅度提高数值算法的速度。</p><h3 id="重要的Python库"><a href="#重要的Python库" class="headerlink" title="重要的Python库"></a>重要的Python库</h3><p>考虑到那些还不太了解Python科学计算生态系统和库的读者,下面我先对各个库做一个简单的介绍。</p><h4 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h4><p>NumPy(Numerical Python的简称)是Python科学计算的基础包。本书大部分内容都基于NumPy以及构建于其上的库。它提供了以下功能(不限于此):</p><ul><li>快速高效的多维数组对象ndarray。</li><li>用于对数组执行元素级计算以及直接对数组执行数学运算的函数。</li><li>用于读写硬盘上基于数组的数据集的工具。</li><li>线性代数运算、傅里叶变换,以及随机数生成。</li><li>用于将C、C++、Fortran代码集成到Python的工具。</li></ul><p>除了为Python提供快速的数组处理能力,NumPy在数据分析方面还有另外一个主要作用,即作为在算法之间传递数据的容器。对于数值型数据,NumPy数组在存储和处理数据时要比内置的Python数据结构高效得多。此外,由低级语言(比如C和Fortran)编写的库可以直接操作NumPy数组中的数据,无需进行任何数据复制工作。</p><h4 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h4><p>pandas提供了使我们能够快速便捷地处理结构化数据的大量数据结构和函数。你很快就会发现,它是使Python成为强大而高效的数据分析环境的重要因素之一。本书用得最多的pandas对象是DataFrame,它是一个面向列(column-oriented)的二维表结构,且含有行标和列标.</p><p>pandas兼具NumPy高性能的数组计算功能以及电子表格和关系型数据库(如SQL)灵活的数据处理功能。它提供了复杂精细的索引功能,以便更为便捷地完成重塑、切片和切块、聚合以及选取数据子集等操作。pandas将是我在本书中使用的主要工具。</p><p>对于金融行业的用户,pandas提供了大量适用于金融数据的高性能时间序列功能和工具。适用于金融数据分析应用的工具。</p><p>R的data.frame对象所提供的功能只是DataFrame对象所提供的功能的一个子集。</p><p>pandas这个名字本身源自于panel  data(面板数据,这是计量经济学中关于多维结构化数据集的一个术语)以及Python data analysis(Python数据分析)。</p><h4 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h4><p>matplotlib是最流行的用于绘制数据图表的Python库。它非常适合创建出版物上用的图表。它跟IPython结合得很好,因而提供了一种非常好用的交互式数据绘图环境。绘制的图表也是交互式的,你可以利用绘图窗口中的工具栏放大图表中的某个区域或对整个图表进行平移浏览。</p><h4 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h4><p>IPython是Python科学计算标准工具集的组成部分,它将其他所有的东西联系到了一起。它为交互式和探索式计算提供了一个强健而高效的环境。它是一个增强的Python shell,目的是提高编写、测试、调试Python代码的速度。它主要用于交互式数据处理和利用matplotlib对数据进行可视化处理。我在用Python编程时,经常会用到IPython,包括运行、调试和测试代码。</p><p>除标准的基于终端的IPython shell外,该项目还提供了:</p><ul><li>一个类似于Mathematica的HTML笔记本(通过Web浏览器连接IPython,稍后将对此进行详细介绍)。</li><li>一个基于Q+框架的GUI控制台,其中含<br>有绘图、多行编辑以及语法高亮显示等功能。</li><li>用于交互式并行和分布式计算的基础架<br>构。</li></ul><p>我将在一章中专门讲解IPython,详细地介绍其大部分功能。强烈建议在阅读本书的过程中使用IPython。</p><h4 id="SciPy"><a href="#SciPy" class="headerlink" title="SciPy"></a>SciPy</h4><p>SciPy是一组专门解决科学计算中各种标准问题域的包的集合,主要包括下面这些包:</p><ul><li>scipy.integrate:数值积分例程和微分方程求解器。</li><li>scipy.linalg:扩展了由numpy.linalg提供的线性代数例程和矩阵分解功能。</li><li>scipy.optimize:函数优化器(最小化器)以及根查找算法。</li><li>scipy.signal:信号处理工具。</li><li>scipy.sparse:稀疏矩阵和稀疏线性系统求解器。</li><li>scipy.special:SPECFUN(这是一个实现了许多常用数学函数(如伽玛函数)的Fortran库)的包装器。</li><li>scipy.stats:标准连续和离散概率分布(如密度函数、采样器、连续分布函数等)、各种统计检验方法,以及更好的描述统计法。</li><li>scipy.weave:利用内联C++代码加速数组计算的工具。</li></ul><p>NumPy跟SciPy的有机结合完全可以替代MATLAB的计算功能(包括其插件工具箱)。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于购置硬盘的相关注意点</title>
      <link href="/2019/03/22/%E5%85%B3%E4%BA%8E%E8%B4%AD%E7%BD%AE%E7%A1%AC%E7%9B%98%E7%9A%84%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2019/03/22/%E5%85%B3%E4%BA%8E%E8%B4%AD%E7%BD%AE%E7%A1%AC%E7%9B%98%E7%9A%84%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>最近在意硬盘选购的问题，刚好有视频指导，这里贴上B站内有中文翻译的<a href="https://www.bilibili.com/video/av46775323" target="_blank" rel="noopener">视频链接</a>,以下将视频内的内容进行删减总结(其实就是自己看英文字幕照着翻译后对比中文官翻修改，滑稽)，Mark住留作往后参考食用，进入正文。</p><p>其实大家不难意识到，现在你所使用的电子设备存储空间正以惊人的速度迅速被填补，其空间占用被视频、游戏以及大量的图像仓库所充斥。</p><p>当下比较热门的解决方式就是将额外的数据上传至云端，但是这种解决方法其实受限于可能需要的每月云端收费服务以及潜在的受限于网速的要求。</p><p>所以去购置一个专用的独立外置存储设备不失为另外一种方便的选择。</p><h3 id="Part-1-NMVe-or-SATA"><a href="#Part-1-NMVe-or-SATA" class="headerlink" title="Part 1. NMVe or SATA"></a>Part 1. NMVe or SATA</h3><p>从简易的U盘到一批存储服务器，其实都属于外置存储。</p><p>在贴近我们实际的消费级层面上，最快的还当属支持NVMe（Non-Volatile Memory express，是一个逻辑设备接口规范）的外置硬盘(SSD)或者硬盘盒。通过它，你可以用外置接口连接M.2 SSD等内置硬盘。它相较于旧时的SATA协议要快的多，这里列出两者数据来进行直观的对比：</p><table><thead><tr><th>类别</th><th>目前最高连续读写速度</th><th>提供给存储协议对象</th></tr></thead><tbody><tr><td>SATA</td><td>600 MB/s</td><td>为机械硬盘设计</td></tr><tr><td>NVMe</td><td>3000 MB/s</td><td>为固态硬盘设计</td></tr></tbody></table><p>因此，当你选购硬盘时，NVMe显然性能上会优秀更多。</p><h3 id="Part-2-接口：USB-3-1-or-雷电3"><a href="#Part-2-接口：USB-3-1-or-雷电3" class="headerlink" title="Part 2. 接口：USB 3.1 or 雷电3"></a>Part 2. 接口：USB 3.1 or 雷电3</h3><p>除了注意你购置的硬盘是否是NVMe的，你还需要注意其他更多的事情。例如你预购入高速的NVMe外置SSD或硬盘盒，你可能需要去弄清它所使用的是何种的接口：是USB  3.1的还是Thunderbolt 3(以下简称雷电3)的，其中，USB 3.1会支持更多的设备，但这当中也有你需要注意的点：</p><table><thead><tr><th>类别</th><th>最高数据传输速率</th></tr></thead><tbody><tr><td>USB 3.0 or 3.1 Gen 1</td><td>5 GBit/s</td></tr><tr><td>USB 3.1 Gen 2</td><td>10 GBit/s</td></tr></tbody></table><p>如上述数据所示，显然后者的参数更加的可观，但如果你所遇到的是雷电3接口时，就不必我多说了8，参数如下：</p><table><thead><tr><th>类别</th><th>最高数据传输速率</th></tr></thead><tbody><tr><td>Thunderbolt 3.0(雷电3)</td><td>40 GBit/s</td></tr></tbody></table><p>也就是说，市面上最快的PCIe(PCI Express) SSD也有足够的速率不会出现瓶颈。而且雷电3接口支持与电脑的PCIe总线直连，其外置硬盘出现的性能损耗问题在NVMe上要比USB小的多，因为USB硬盘通常要先把数据送至更慢的控制器去。</p><p>但是，雷电3也存在着额外需要考虑的问题，因为很少有电脑去支持它并且大量这类型的SSDs的价格也倾向于比同类的USB接口的SSDs更加的昂贵。所以是选择Thunderbolt 3.0还是USB 3.1 Gen 2，两者在同样搭配上NVMe硬盘的基础上，其实速度都要超过标准的SATA接口连接。</p><p>尽管与NVMe配对的雷电3接口在纸面上显然会更快，但在实际的使用过程中，你可能并不会对他们之间的差异有所察觉，除非你只是一味的使用它来拷贝超大文件。</p><p>另外，你其实更需要去注意的是你选的不要是一个USB 3.1 Gen 1的，因为它甚至不如标准SATA连接</p><table><thead><tr><th>类别</th><th>最高数据传输速率</th></tr></thead><tbody><tr><td>USB 3.1 Gen 1</td><td>5 GBit/s</td></tr><tr><td>SATA III</td><td>6 GBit/s</td></tr></tbody></table><p>另外，如果你对以上参数都不太敏感的化，你就只需要再三明确检查它不是USB 2的，虽然它更便宜但同时速度更低于以上任何一种接口，其最大的理论速度仅有480 MBit/s。</p><p>当然，如果你只是需要一个入门级别日常存储ppt演示，对于传输速度的要求不是很在意愿意花时间等候的话，你就不必纠结太多，甚至USB 2.0都可以满足。</p><h3 id="Part-3-其他因素"><a href="#Part-3-其他因素" class="headerlink" title="Part 3. 其他因素"></a>Part 3. 其他因素</h3><p>另外这里有一个误区，就算硬盘或者硬盘盒使用的是新USB TYPE-C接口，其实你也无法据此判断它用的是10 GBit/s的USB 3.1还是雷电3 ！！！</p><p>因为USB-C只是一个物理接口而已，它其实也可以使用更慢的数据传输协议，所以别光看外部物理接口就认为没有问题，还是需要花时间多看看参数才是。</p><p>除此之外，金属外壳的硬盘或硬盘盒可以辅助散热，这一点也是挺有用的。</p><p>但只要你购置的硬盘支持10 GBit或更高速度的产品，与内置硬盘相比就不会有太大的性能损失，除非你就是一个一天到晚喜欢测文件传输速度的人。</p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hardware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课前准备—认识XML</title>
      <link href="/2019/01/26/%E8%AF%BE%E5%89%8D%E5%87%86%E5%A4%87%E2%80%94%E8%AE%A4%E8%AF%86XML/"/>
      <url>/2019/01/26/%E8%AF%BE%E5%89%8D%E5%87%86%E5%A4%87%E2%80%94%E8%AE%A4%E8%AF%86XML/</url>
      
        <content type="html"><![CDATA[<h4 id="认识XML"><a href="#认识XML" class="headerlink" title="认识XML"></a>认识XML</h4><p>XML是对HTML的补充,它不会替代 HTML,在大多数Web应用程序中,XML用于传输数据,而HTML用于格式化并显示数据。</p><p>XML是独立于软件和硬件的信息传输工具。(以纯文本格式进行存储)</p><p>XML指可扩展标记语言（eXtensible Markup Language）,XML被设计用来传输和存储数据。</p><p>XML标签没有被预定义,您需要自行定义标签。</p><h4 id="XML把数据从HTML分离"><a href="#XML把数据从HTML分离" class="headerlink" title="XML把数据从HTML分离"></a>XML把数据从HTML分离</h4><p>如果您需要在HTML文档中显示动态数据,那么每当数据改变时将花费大量的时间来编辑HTML。</p><p>通过XML,数据能够存储在独立的XML文件中。这样您就可以专注于使用HTML/CSS进行显示和布局,并确保修改底层数据不再需要对HTML进行任何的改变。</p><p>通过使用几行JavaScript代码,您就可以读取一个外部XML文件,并更新您的网页的数据内容。</p><h4 id="XML树结构"><a href="#XML树结构" class="headerlink" title="XML树结构"></a>XML树结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;Tove&lt;/to&gt;</span><br><span class="line">&lt;from&gt;Jani&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&apos;t forget me this weekend!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p>第一行是XML声明。它定义XML的版本（1.0）和所使用的编码（ISO-8859-1=Latin-1/西欧字符集）。</p><p>下一行描述文档的根元素<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;note&gt;</span><br></pre></td></tr></table></figure></p><p>接下来4行描述根的4个子元素<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;to&gt;Tove&lt;/to&gt;</span><br><span class="line">&lt;from&gt;Jani&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&apos;t forget me this weekend!&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>最后一行定义根元素的结尾：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure></p><p>总结就是,XML文档必须包含根元素。该元素是所有其他元素的父元素。XML文档中的元素形成了一棵文档树。这棵树从根部开始,并扩展到树的最底端。所有的元素都可以有子元素：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;root&gt;</span><br><span class="line">&lt;child&gt;</span><br><span class="line">&lt;subchild&gt;.....&lt;/subchild&gt;</span><br><span class="line">&lt;/child&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure></p><p>所有的元素都可以有文本内容和属性（类似 HTML 中）。</p><h4 id="XML-语法规则"><a href="#XML-语法规则" class="headerlink" title="XML 语法规则"></a>XML 语法规则</h4><p>在HTML中,某些元素不必有一个关闭标签：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph.</span><br><span class="line">&lt;br&gt;</span><br></pre></td></tr></table></figure></p><p>在XML中,省略关闭标签是非法的。所有元素都必须有关闭标签：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>XML标签对大小写敏感。</p><p>在HTML中,常会看到没有正确嵌套的元素：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/b&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p><p>在XML中，所有元素都必须彼此正确地嵌套：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/i&gt;&lt;/b&gt;</span><br></pre></td></tr></table></figure></p><p>XML文档必须有根元素。</p><p>XML 属性值必须加引号。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;note date=&quot;12/11/2007&quot;&gt;</span><br><span class="line">&lt;to&gt;Tove&lt;/to&gt;</span><br><span class="line">&lt;from&gt;Jani&lt;/from&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure></p><p>实体引用.</p><p><img src="https://ws2.sinaimg.cn/large/006B4RNogy1g19yqm2glbj30rb066mx8.jpg" alt="image"></p><p>注释：在XML中,只有字符”&lt;”和”&amp;”确实是非法的。大于号是合法的,但是用实体引用来代替它是一个好习惯。XML中的注释<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- something code --&gt;</span><br></pre></td></tr></table></figure></p><p>在XML中,文档中的空格不会被删减。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
            <tag> C# </tag>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小废的Introduction</title>
      <link href="/2019/01/21/%E5%B0%8F%E5%BA%9F%E7%9A%84Introduction/"/>
      <url>/2019/01/21/%E5%B0%8F%E5%BA%9F%E7%9A%84Introduction/</url>
      
        <content type="html"><![CDATA[<p>起初从同学那里了解到hexo以后，就一直有一个建站的念头，一个专属于自己的博客网站，这应该是我现下最想完成的一件事情吧，所以借着这次假期的机会，我依照着教程搭建了现在的小废在不在、。</p><p>目前的样式还基本上与范例没有多大的差别，所以需要后期自己的自主学习使他拥有自己的个性，就像看到前辈们指出的那样，如果发现有同一主题出现在两个博客网站里，就要开始筹措着换点新花样使其与众不同。</p><a id="more"></a><p>建立这个网站的初衷其实不单只是练练手而已，这个网站基本上也会伴随着我一直走下去，会不断的通过学习去增加新的功能，去丰富完善界面，当然，这今后也将作为我随时更新自己生活学习娱乐记录的处所，算是自己私人的小小空间吧。</p><p>就说这么多吧，一切都有待自己去实践才有说服力，希望自己真的能对得起自己最初的梦想。</p><p>加油，我是小废，我要走的路还有很长很长，以上。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
